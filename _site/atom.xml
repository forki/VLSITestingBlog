<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>VLSI Testing</title>
 <link href="http://hyde.getpoole.com/atom.xml" rel="self"/>
 <link href="http://hyde.getpoole.com/"/>
 <updated>2016-02-27T10:01:16+05:30</updated>
 <id>http://hyde.getpoole.com</id>
 <author>
   <name>Anjan Kumar</name>
   <email></email>
 </author>

 
 <entry>
   <title>F# end to end</title>
   <link href="http://hyde.getpoole.com/2016/02/26/literate/"/>
   <updated>2016-02-26T00:00:00+05:30</updated>
   <id>http://hyde.getpoole.com/2016/02/26/literate</id>
   <content type="html">&lt;h1&gt;&lt;a name=&quot;Literate-sample&quot; class=&quot;anchor&quot; href=&quot;#Literate-sample&quot;&gt;Literate sample&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;run it in Visual Studio or MonoDevelop).&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;/// The Hello World of functional languages!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;factorial&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;))

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a name=&quot;Hiding-code&quot; class=&quot;anchor&quot; href=&quot;#Hiding-code&quot;&gt;Hiding code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to include some code in the source code,
but omit it from the output, you can use the &lt;code&gt;hide&lt;/code&gt;
command.&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>My first post</title>
   <link href="http://hyde.getpoole.com/2016/02/26/FirstPost/"/>
   <updated>2016-02-26T00:00:00+05:30</updated>
   <id>http://hyde.getpoole.com/2016/02/26/FirstPost</id>
   <content type="html">&lt;p&gt;Love you Anjan&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, &#39;fs1&#39;, 1)&quot; onmouseover=&quot;showTip(event, &#39;fs1&#39;, 1)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;val a : int&lt;br /&gt;&lt;br /&gt;Full name: February_26_2016.a&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>F# end to end</title>
   <link href="http://hyde.getpoole.com/2016/02/25/test1/"/>
   <updated>2016-02-25T00:00:00+05:30</updated>
   <id>http://hyde.getpoole.com/2016/02/25/test1</id>
   <content type="html">&lt;h2&gt;&lt;a name=&quot;Introduction&quot; class=&quot;anchor&quot; href=&quot;#Introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recently my colleague &lt;a href=&quot;https://twitter.com/simontcousins&quot;&gt;@simontcousins&lt;/a&gt; published an article comparing to similar projects one written
in C# one written in F#. The conclusion is that for the two projects the F# one is about 4% of the size.
You can read more about this &lt;a href=&quot;http://www.simontylercousins.net/journal/2013/2/22/does-the-language-you-choose-make-a-difference.html&quot;&gt;here&lt;/a&gt;.
Now normally, a typical project comprises of several languages / technologies.
&lt;em&gt; Application Code -&amp;gt; C#
&lt;/em&gt; Build -&amp;gt; MSBuild/Nant
&lt;em&gt; Deploy -&amp;gt; Powershell script/Batch script
&lt;/em&gt; UI (Web) -&amp;gt; HTML/Javascript
&lt;em&gt; Documentation -&amp;amp;gt; Word/HTML
However the F# project in question here has a profile more like this,
&lt;/em&gt; Application Code -&amp;gt; F#
&lt;em&gt; Build -&amp;gt; F#
&lt;/em&gt; Deploy -&amp;gt; F#
&lt;em&gt; UI (Web) -&amp;gt; HTML/CSS/Javascript
&lt;/em&gt; Documentation -&amp;gt; F#
Note the stack is &#39;almost&#39; completely F# (we actually could have made this completely F# see below). Maybe I&#39;m biased but I think that this is a huge benefit for
maintainability I only need to have my F# brain switched on and I can change any part of the application. Sure I have to learn a few
libraries, but the playfulness offered by the REPL here makes testing and experimenting easy; this is especially true when it comes writing
build and deployment scripts, which I normally find quiet difficult to test.&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;Full-stack-F&quot; class=&quot;anchor&quot; href=&quot;#Full-stack-F&quot;&gt;Full stack F#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So is it possible to use F# for everything Build, Deployment, UI (Web/WPF), Documentation. The answer is simply YES!!
There is just a few libraries we need to know about to achieve this. Lets look at each area of a typical application and see which
libraries we can use.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Application-Logic&quot; class=&quot;anchor&quot; href=&quot;#Application-Logic&quot;&gt;Application Logic&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ok this might seem like an obvious one, just write F#, but I thought I&#39;d use this as an opportunity to highlight some libraries that I find useful
&lt;em&gt; &lt;a href=&quot;&quot; title=&quot;http://fsharp.github.com/fsharpx/&quot;&gt;FSharpx&lt;/a&gt; - Contains lots of extensions to the F# core modules, many useful data structures, commonly used monads, validation, &lt;a href=&quot;http://msdn.microsoft.com/en-gb/library/hh156509.aspx&quot; target=&quot;_blank&quot;&gt;type providers&lt;/a&gt;, async extensions etc.&lt;/li&gt;
&lt;/em&gt; &lt;a href=&quot;&quot; title=&quot;http://tpetricek.github.com/FSharp.Data&quot;&gt;FSharp.Data&lt;/a&gt; - Contains implementation of various type providers such as CSV, XML and JSON and I&#39;m sure as the library matures we will see a lot more implementations to connect to wide variety of data sources.&lt;/li&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Build-and-Deployment&quot; class=&quot;anchor&quot; href=&quot;#Build-and-Deployment&quot;&gt;Build and Deployment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To build and deploy application with F# we can use &lt;a href=&quot;http://fsharp.github.com/FAKE&quot;&gt;FAKE&lt;/a&gt;. FAKE allows you to write your build and
deployment scripts in F#. A simple script might look something like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// include Fake libs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Fake&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//Define Targets&lt;/span&gt;

&lt;span class=&quot;i&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Cleans the last build&amp;quot;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clean&amp;quot;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; () &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; --- Cleaning stuff --- &amp;quot;&lt;/span&gt;
)

&lt;span class=&quot;i&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Build&amp;quot;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; () &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; --- Building the app --- &amp;quot;&lt;/span&gt;
)

&lt;span class=&quot;i&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Deploy&amp;quot;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; () &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; --- Deploying app --- &amp;quot;&lt;/span&gt;
)

&lt;span class=&quot;c&quot;&gt;//Define Dependencies&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;Clean&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Build&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Deploy&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//Start Build&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;RunParameterTargetOrDefault&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;target&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Deploy&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p style=&quot;text-align: justify&quot;&gt; Anjan kumar is if you choose to write your UI using WPF then things are fairly straight forward, Write XAML markup and then use code behind F#.
However wiring up the code behind can be a pain because of the C# code gen involved, typically you have to load the view yourself using a XAML reader, or code the 
view layout in F# as in these series of examples from. If however you want to keep XAML markup then FSharpx has a XAML type provider&lt;/a&gt;
that helps things along here.&lt;/p&gt;
&lt;p&gt;The really nice thing about this is you have the full .NET framework and the full power of F# available in your scripts. Additionally FAKE
also has an accompanying website, which allows you to manage your deployment agents, so you can easily deploy, upgrade or rollback
applications from a central place.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;UI&quot; class=&quot;anchor&quot; href=&quot;#UI&quot;&gt;UI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;How you tackle writing a UI in F# obviously depends on your choice of technologies. There are others obviously but the two I&#39;m going to
consider are WPF and HTML/CSS/Javascript.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;WPF&quot; class=&quot;anchor&quot; href=&quot;#WPF&quot;&gt;WPF&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you choose to write your UI using WPF then things are fairly straight forward, Write XAML markup and then use code behind F#.
However wiring up the code behind can be a pain because of the C# code gen involved, typically you have to load the view yourself
using a XAML reader, or code the view layout in F# as in these series of examples from &lt;a href=&quot;http://blogs.msdn.com/b/dsyme/archive/2008/01/05/learning-wpf-through-f-and-vice-versa-by-john-liao.aspx?Redirected=true&quot;&gt;John Laio&lt;/a&gt;.
If however you want to keep XAML markup then FSharpx has a &lt;a href=&quot;https://github.com/fsharp/fsharpx/tree/master/src/FSharpx.TypeProviders.Xaml&quot;&gt;XAML type provider&lt;/a&gt;
that helps things along here.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, &#39;fs1&#39;, 1)&quot; onmouseover=&quot;showTip(event, &#39;fs1&#39;, 1)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, &#39;fs1&#39;, 2)&quot; onmouseover=&quot;showTip(event, &#39;fs1&#39;, 2)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, &#39;fs2&#39;, 3)&quot; onmouseover=&quot;showTip(event, &#39;fs2&#39;, 3)&quot; class=&quot;i&quot;&gt;Windows&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, &#39;fs1&#39;, 4)&quot; onmouseover=&quot;showTip(event, &#39;fs1&#39;, 4)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, &#39;fs2&#39;, 5)&quot; onmouseover=&quot;showTip(event, &#39;fs2&#39;, 5)&quot; class=&quot;i&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Controls&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;FSharpx&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;MainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;XAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;libs/MainWindow.xaml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loadWindow&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;MainWindow&lt;/span&gt;()
    &lt;span class=&quot;i&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;MessageBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Show&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;)
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, &#39;fs3&#39;, 6)&quot; onmouseover=&quot;showTip(event, &#39;fs3&#39;, 6)&quot; class=&quot;i&quot;&gt;ignore&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Root&lt;/span&gt;

[&amp;lt;&lt;span class=&quot;i&quot;&gt;STAThread&lt;/span&gt;&amp;gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;args&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Application&lt;/span&gt;())&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Run&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;loadWindow&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;See &lt;a href=&quot;http://www.navision-blog.de/blog/2012/03/22/wpf-designer-for-f/&quot;&gt;Steffan Forkmann&#39;s&lt;/a&gt; post for more information about this.
Lets also not forget about first class events and the asynchronous programming model in F# that makes writing responsive UI&#39;s that much easier.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;HTML-CSS-Javascript&quot; class=&quot;anchor&quot; href=&quot;#HTML-CSS-Javascript&quot;&gt;HTML/CSS/Javascript&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you go webby then things get a little more interesting, we have several options available here.
&lt;em&gt; &lt;a href=&quot;http://www.websharper.com/home&quot;&gt;WebSharper&lt;/a&gt; - This is a very complete web framework, I have not personally played with it yet but I understand it does everything you&#39;d want and more. Well worth checking out.
&lt;/em&gt; &lt;a href=&quot;https://github.com/ZachBray/FunScript&quot;&gt;FunScript&lt;/a&gt; - A new project, but it exploits the power of type providers to offer strongly typed access to TypeScript files &lt;a href=&quot;http://tomasp.net/blog/&quot;&gt;@thomaspetricek&lt;/a&gt; has a nice talk about it.
With fun script you still have to write the HTML markup, although providing a Combinator library to emit the markup wouldn&#39;t be that difficult. (If some one knows of one I&#39;ll add it here), but this isn&#39;t application logic anyway. The important stuff is still written in F# and compiled to javascript later on.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Documentation&quot; class=&quot;anchor&quot; href=&quot;#Documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://tomasp.net/blog/&quot;&gt;@thomaspetricek&lt;/a&gt; recently released &lt;a href=&quot;https://github.com/tpetricek/FSharp.Formatting&quot;&gt;FSharp.Formatting&lt;/a&gt; we can generate documentation
from an F# script file, using a mix of markdown and F#, for an example see this &lt;a href=&quot;http://tpetricek.github.com/FSharp.Formatting/&quot;&gt;link&lt;/a&gt;. This can then be integrated into your FAKE build script,
using a build target something like the following example, Incidentally this is exactly the library that is used to create this blog.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, &#39;fs1&#39;, 7)&quot; onmouseover=&quot;showTip(event, &#39;fs1&#39;, 7)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, &#39;fs4&#39;, 8)&quot; onmouseover=&quot;showTip(event, &#39;fs4&#39;, 8)&quot; class=&quot;i&quot;&gt;IO&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, &#39;fs5&#39;, 9)&quot; onmouseover=&quot;showTip(event, &#39;fs5&#39;, 9)&quot; class=&quot;i&quot;&gt;FSharp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Literate&lt;/span&gt;

&lt;span class=&quot;i&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Docs&amp;quot;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Combine&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;currentDirectory&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;template.html&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Combine&lt;/span&gt;(&lt;span class=&quot;k&quot;&gt;__SOURCE_DIRECTORY__&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;samples&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;out_dir&amp;quot;&lt;/span&gt;
    
    &lt;span class=&quot;i&quot;&gt;Literate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;ProcessDirectory&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;sources&lt;/span&gt;, &lt;span class=&quot;i&quot;&gt;template&lt;/span&gt;, &lt;span class=&quot;i&quot;&gt;output&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a name=&quot;Conclusion&quot; class=&quot;anchor&quot; href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok I might of over stated that &lt;strong&gt;everything&lt;/strong&gt; can be written in F#, certainly at the moment there is a lack of libraries for
emitting XAML and HTML (with the exception of WebSharper of course). But HTML and XAML are really inconsequential when it comes the to
the correctness of your application they do not contain any logic which needs to be tested they simply control layout. The important thing
to take from the above is the fact that all of your logic whether it is for build, deployment, UI interaction, example documentation can be
written in a type safe way using the various libraries and F# feature spoken about above.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System.Windows&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val ignore : value:&amp;#39;T -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.ignore&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;namespace System.IO&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;namespace Microsoft.FSharp&lt;/div&gt;
</content>
 </entry>
 

</feed>
